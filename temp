# Information Gathering

Information Gathering involves defining the attack surface, by performing:

* IP and Domain Discovery
* OSINT
* Port Scanning and Service Versioning


## Passive Attack Surface Discovery

Every bug bountying story starts with a domain name, e.g., "example.com".
Given a domain name, we want to be able to gather as much information as possible in order to define a bigger attack surface.

The first step could be to determine the range of IP Addresses belonging
to a domain, this can be done with:

* [robtex.com](https://www.robtex.com/)
* [bgp.he.net](https://bgp.he.net/)

While a significant number of hostnames with some additional info
is provided by:
* [dnsdumpster.com](https://dnsdumpster.com/)

We can also gather information from common search engines, through
a wise use of dorks:

```google
site:example.com
```

We can also be more specific by using more advanced dorks, for more details,
check the shodan part.

## Active Attack Surface Discovery

Use all.txt by jhaddix as list, which is
provided in this repository in:


[lists/subdomains/all.txt](https://gitlab.com/uccgg/ucc_methodology/lists/subdomains/all.txt)


```sh
amass -active -d  domain.com | tee report.txt
```

or with a more complex launch:

```sh
amass -brute -w lists/subdomains/all.txt -d domain1.com,domain2.com,domain3.com | tee report.txt
```

```sh
subfinder -d domain.com -o output.txt
```

```sh
./subbrute.py -p google.com gmail.com blogger.com | tee results.out
```

[knockpy](https://https://github.com/guelfoweb/knock) resolve single ip or domain name with --resolve (-r):
```sh
./knockpy.py -r domain.com | tee results.out
```

It can bruce force too:
```sh
./knockpy.py domain.com | tee results.out
```

```sh
./sublist3r.py -d domain.com | tee results.out
```

```sh
fierce -dns nmap.org
```

Subsequently, we can try with:

basic command: 

```sh
dnsenum domain
```

```sh
dnsmapdomain -r /tmp/results.txt
```

```sh
 dnsmap domain -w wordlist.txt
 # results will be stored in /tmp
```

```sh
dnsenum --subfile domain.txt -v -f /usr/share/dnsenum/dns.txt -u a -r domain
```

```sh
dnsmap-bulk domains.txt /tmp/results
```

### DNS Zone Transfers

Windows DNS zone transfer
```sh
nslookup -> set type=any -> ls -d blah.com
```

Linux DNS zone transfer
```sh
dig axfr example.com @ns1.blah.com
```

## Extending Attack Surface with Virtual Hosts


[virtual-host-discovery](https://github.com/jobertabma/virtual-host-discovery)
```sh
ruby scan.rb --ip=192.168.1.101 --host=domain.tld
```

[VHostScan](https://github.com/codingo/VHostScan)
```sh
VHostScan -t domain.com
```

[hostmap](https://github.com/jekil/hostmap)
```sh
ruby hostmap.rb -t 94.23.200.187
```

or with an Nmap NSE script
```sh
nmap --script http-vhosts -p 80,8080,443 <target>
```

A Bing dork for finding domains hosted at a particular IP is:
```bing
ip:<ip_address>
```
A Yahoo dork for finding domains hosted at a particular IP is:
```bing
ip:<ip_address>
```

We can also use an nmap script to discover other hosts on a certain IP:
```sh
nmap -p 80 --script hostmap-bfk.nse nmap.org
```

We can also use automated tools such as:
[Bing Reverse IP](https://github.com/p0z/Bing-Reverse-IP)
```sh
python bing.py -t <ip_address> -r <number_of_search_results>
```
or 

[Yougetsignal](https://www.yougetsignal.com/tools/web-sites-on-web-server/
)

## Filter only Available Websites

Once we have a list of subomains, we try to see which ones have an active 
web servers, by screenshotting web pages automatically:
```sh
python snapper.py -f ~/list_of_found_domains.txt -c 10 -v
```
 


## Port Scan and Service Discovery


We first run this, which checks the top 1000 ports
```sh
nmap -v -sS -A -oA outputfilename <target>
```

Then in background we can run a scan through all 65535 ports like this:
```sh
nmap -v -sS -p- -A -oA outputfilename <target>
```

We should also scan UDP ports:
```sh
nmap -v -sU -sS -oA outputfilename <target>
```

In any case, whenver we find webservers, it may be a good idea to check
for web servers vulnerabilities with:

```sh
nikto -h <ip-address>
```

Additionally it may be useful to check for some nmap scripts like:
```sh
nmap --script smtp-open-relay.nse <target>
```

Check the banner
```sh
nmap -sV --script=banner <target>
```
Check the HTTP headers
```sh
nmap -sV --script=http-headers <target>
```

We can check other nmap enumeration scripts related to a specific protocol/service
by searching for it:
```sh
ls /usr/share/nmap/scripts/* | grep ftp
```



Some additional notes on port scanning:
Sometimes it happens to see strange services on uncommon
ports, for example a scenario could be finding, the following ports:
* 22: ssh server
* 80: http web server
* 5435: tcpwrapped
* 8082: H2 database
* 9092: XmlIpcRegSvc

our inference is that on port 22 thre is an ssh server, on port 80
there is a web server. Then we see on port 8082 an H2 database
anyway there are two misterious ports for which we could not know
what they are used for. In this case an educated guess could be to 
investigate if some of the other services which may be not so 
common use other ports. In this case, for example an H2 database
uses more than just port 8082, it also uses port 5435 and port 9092
which now may be associated to an H2 database and gives us a more
complete picture of what is happening. This can be found just
by doing some research on H2 databases and seeing which ports they
keep open.
So the advice is, once found a service we may not know and some 
ports we may not understand their purpose, always do some research 
on this service we may not know to find out if it is also using
these other ports.




On a website, a good idea is to use `wappalyzer` browser extension to understand
which are the technologies employed by the the web application.
This step can also be enhanced manually, by checking html source code, server
response headers and see which file extensions are accepted and which are not.

### Operating System Fingerprinting

We can have a passive fingerprint of the Operating System of a host in the same LAN:
```sh
pOf -i eth0
```

If we are on a different network, we can use:
```sh
xprobe2 <ip_address>
```

Or simply:

```sh
nmap -O <target>
```

## Web Content Discovery

In general we use the medium list provided by dirbuster.
```sh
dirbuster
```

```sh
to add gobuster or dirb
```
Dirb
```sh
dirb -X .html,.php http://192.168.1.224/ /usr/share/wordlists/dirb/common.txt 
```

Wfuzz
```sh
wfuzz -c -W /usr/share/wfuzz/wordlist/dir/common.txt --hc 400,404,403 <url>
```

Metasploit dir_scanner
```sh
msfconsole
use auxiliary/scanner/http/dir_scanner
set RHOSTS <ip>
set RPORT <port>
set DICTIONARY <path>
set VHOST <virtual_host> (optional)
run
```

Dirsearch
```sh
./dirsearch.py â€“u <url> -e php -f -x 400,403,404
```

Goofile
```sh
goofile -d <url> -f <file_type>
```


## Search for Vulnerabilities/Exploit

```sh
searchsploit <name_of_service>
```

We can check for very low hanging fruit Samba vulnerabilities with:
```ssh
nmap -v -p 445 --script=smb-check-vulns --script-args=unsafe=1 192.168.1.X
```

Or we could just inspect the other nmap *vuln* script by using:
```sh
ls /usr/share/nmap/scripts/* | grep vuln
```


## Shodan


@@@ TEMP (Fabio): information gathering
host discovery: nmap -sn -oN /scan-prova.txt 10.50.96.0/23

no ping scan (-Pn) with specified ports (-PS): nmap -sn -PS22,135,443,445 10.50.96.0/23 useful for when ping scan is filtered by firewalls and may not give all the hosts

Ping Sweep: nmap -PE -sn -n 10.50.96.0/23 -oX /root/scan.xml (with -PE there aren't TCP scans on port 80...)

DNS discovery: nmap -sS -sU -p53 -n 10.50.96.0/23
------------------------------------------------------------

NS lookup: (use the hosts with port 53 open)


nslookup (hit enter)

server 10.50.96.5

set q=NS

foocampus.com

--------------------------------------------------------------
now use the found nameservers to look up the IPs

nslookup (hit enter)

server 10.50.96.5

ns.foocampus.com        ----> result 10.50.96.21
ns1.foocampus.com       ----> result 10.50.96.22

---------------------------------------------------------------
MX record

nslookup (hit enter)

server 10.50.96.5

set q=MX

foocampus.com           ----> mail exchanger = 10 pop3.foocampus.com.

----------------------------------------------------------------
ANY record

nslookup (hit enter)

server 10.50.96.5

set q=ANY

foocampus.com

    |
    V

result:

Server:		10.50.96.5
Address:	10.50.96.5#53

foocampus.com	nameserver = ns1.foocampus.com.
foocampus.com	nameserver = ns.foocampus.com.
foocampus.com
	origin = foocampus.com
	mail addr = campusadmin
	serial = 47
	refresh = 900
	retry = 600
	expire = 86400
	minimum = 3600
foocampus.com	mail exchanger = 10 pop3.foocampus.com.
foocampus.com	rdata_65281 = \# 20 000000000000000200000384000000010A326005

---------------------------------------------------------------------------
Zone transfer with nslookup

nslookup (hit enter)

server 10.50.96.5

ls -d foocampus.com  (ls command isn't implemented in kali linux :( )

--------------------------------------------------------------------------
Zone transfer with dig

dig @10.50.96.5 foocampus.com -t AXFR

   |
   V

result:

; <<>> DiG 9.10.3-P4-Debian <<>> @10.50.96.5 foocampus.com -t AXFR
; (1 server found)
;; global options: +cmd
foocampus.com.		3600	IN	SOA	foocampus.com. campusadmin. 47 900 600 86400 3600
foocampus.com.		3600	IN	NS	ns1.foocampus.com.
foocampus.com.		3600	IN	NS	ns.foocampus.com.
foocampus.com.		3600	IN	MX	10 pop3.foocampus.com.
ftp.foocampus.com.	3600	IN	A	10.50.96.10
intranet.foocampus.com.	3600	IN	A	10.50.96.15
management.foocampus.com. 3600	IN	A	10.50.96.15
ns.foocampus.com.	3600	IN	A	10.50.96.21
ns1.foocampus.com.	3600	IN	A	10.50.96.22
pop3.foocampus.com.	3600	IN	A	10.50.96.60
www.foocampus.com.	3600	IN	A	10.50.96.15
foocampus.com.		3600	IN	SOA	foocampus.com. campusadmin. 47 900 600 86400 3600
;; Query time: 361 msec
;; SERVER: 10.50.96.5#53(10.50.96.5)
;; WHEN: Tue Oct 25 13:00:34 CEST 2016
;; XFR size: 12 records (messages 12, bytes 685)

-------------------------------------------------------------------------------------------------
Find domain name via DNS reverse lookup with dig
dig @172.16.5.10 -x 172.16.5.10
example result: dc01.sportsfoo.com (domain name: sportsfoo.com)
-------------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------------
@@@/TEMP (Fabio)


@@@TEMP (Fabio): Scanning

Hping3 (packet crafter):

hping3 -S 172.217.21.206 -c 4 -p 80 (-S syn, -c number of packets, -p port)

flags RA (rst/ack) , SA (syn/ack) etc. It can allow to see if a port is open or not. If no port is specified, port 0 is used.



-sS (TCP SYN scan)  - farly accurate about |open| |closed| |filtered| and not obtrusive. Half open connection. syn --> |syn/ack| (open) |rst| (closed). No response or ICMP unreachable = filtered.

-sT (TCP connect scan) - less accurate. full open TCP connection made by the OS, no raw packets, easier to be catched by an IDS

-sU (UDP scans) - useful for scannin service on UDP like DNS, SNMP, DHCP etc. much slower

-sI [zombie_ip] [target_ip] (Idle scan) - stealth scan that uses a zombie that has IP ID sequence generation: incremental.
how to find a zombie: nmap -O -v [zombie_ip_to_test]
how to exploit the zombie: use nmap -sI option and send a SYN packet to the zombie with hping3. If the IP\fragmentation ID is incrememted by 2, the port on the target is open. If the increment is of only 1, then the target's port is closed.

-sN; -sF; -sX (TCP Null, FIN, Xmas scans) - sends a TCP packet without TCP flags,  with FIN set or with FIN, PSH and URG bits set (Christmas). If RST is received, port is closed, if no response is received port is open or filtered. OS like Windows, Cisco IOS and IBM OS/400 send always a RST response even if the port isn't closed. These kind of scans are more reliable on UNIX systems then and when a modern stateful firewall isn't in place.

-sA (TCP ACK scan) - sends an ACK packet for testing the firewall. It isn't used to determine if a port is open or closed. If we don't get a response or a ICMP error the port is filtered else it's unfiltered.

-sO (IP protocol scan) - useful for enumerating the supported IP protocols (TCP/UDP/ICMP). Any response from any protocol means the port is likely open. An ICMP protocol unreachable error proves the port is open but filtered. No response can mean the port is open | filtered.

The -o option is used to output the result to a file: -oN (normal); -oX (xml format); -oG (greppable); -oS (sCRiPt KiDDi3 OutPU+)

The -v or -vv option is used to enable and increase the verbosity level

The -d or -d[number] option is used to enable and increase debug mode

The --packet-trace option is amazing for understanding how nmap works or interpreting better a scan

The --resume <logfilename> option allows to resume scans if saved with -oN o -oG only.

-----------------------------------------------------------------------------------------------
FIREWALL/IDS EVASION

Fragmentation: -f (Can't be used with -sT and -sV). Modern IDS are able to reassemble fragments :(

Decoys: -D for sending packets from your IP and packets from spoofed IPs in order to fool the IDS
example: nmap -sS -D 199.199.199.1,ME, 198.198.198.23 [target]. If ME isn't specified, the attacker's IP position is randomised. Decoys can't be used together with -sT and -sV.



Amap: tool for guessing services and applications even when running on a non standard port

using nmap output: amap -i <nmap file> -o <amap output file> -m (-m for machine readable output)

basic amap scan: amap (modes) (options) <host IP address> <port>
example: amap -bqvl 127.0.0.1 443 (use -l only for speed)

amap scan with port range: amap (options) <host IP address> <port range>
example: amap -bqv 127.0.0.1 21-6000
--------------------------------------------------------------------------------------------------
Unicornscan: fast and scalable scanner that can be used with fantaip
example: unicornscan -r200 -mU 192.168.142.0/24:53 -s 192.168.140.53-p
-r is for the speed, -mU (UDP scan) of that netblock on port 53, fetching the result from the fantaip relay at address 192.168.140.53
--------------------------------------------------------------------------------------------------
pOf: passive OS fingerprinting from packet sniffing
example: pOf -i eth0
--------------------------------------------------------------------------------------------------
@@@/TEMP (Fabio)

@@@ TEMP (FABIO): OS AND SERVICE DETECTION

OS DETECTION:

xprobe2 <ip_address>
nmap -O -iL <targets.txt>
nmap -A iL <targets.txt>

msf > use auxiliary/scanner/smb/smb_version
msf > set RHOSTS .....
msf > run

SERVICES/PORTS DETECTION:

nmap -sT -sV -iL <targets.txt>
nmap -sT -sV <ip_address>

@@@ /TEMP (FABIO)
